#Create transition count and tranversion count
"""transitions: substituting a purine to another purine or a pyrimidine to another pyrimidine
transversions: substituting a purine (A,G) to a pyrimidine (T/U,C) or vice versa"""
def R_ration(s1, s2):
    transition_count = 0
    tranversion_count = 0
    length = len(s1)
    purine = ["A", "G"]
    pyrimidine = ["C", "T"]#Only considering dna
    #print(len(s2))
    for i in range(length):
        #First one: purine to purine or pyrimidine to pyrimidine
        if (s1[i] == "A" and s2[i] == "G") or (s1[i] == "G" and s2[i] == "A") or \
            (s1[i] == "C" and s2[i] == "T") or (s1[i] == "T" and s2[i] == "C"):
            transition_count += 1
            continue
        if (s1[i] in purine and s2[i] in pyrimidine) or (s1[i] in pyrimidine and s2[i] in purine):
            tranversion_count += 1
    #print(transition_count)
    #print(tranversion_count)
    return round(transition_count/tranversion_count,11)
if __name__ == "__main__":
    s1 = "TTGTACCCGTCCCAAAAGCGGTGGTGAGGACGAAAACCGGTAGTCTTGCTCGAATGAATGCTTGGAGGAATTTGGCATGTAGAGTTCGATTTTCTCATTGTTCAGTTATAAGGGCCGATATTGCTGATGTGGCACACAAGTGATCGAATGCAACTAGACACTGTTCTTAGCGGCGCCACTAGGTCAAGGGTGCACTCCAATGGCCTAACTGCCCATCTGGCCGCCGCAACCCACAGAGACCGGCAGAATTTGGACCAGAACTTAGATGCTAACGAGTGGAGAAGACGAACATATATGTCGCGAGGAACGTGAGAACAAATAGATATACTGTATCGCTAGTATCCTGTGATTAGCAGATGCCTGTCATCACATGACATTTATTGAAGTGTAAGATATACATAATTGGCCCGCTAAGCAGTCCATACATCACCCAGACGATGTTGAACACAGTCCATGTGGGGAGTTTACTGGTCTAACTCTTTGTGCTCACTCTTTACAGTTACATATTAGAGAGAGAAGGCAAAGCCGCCCCCTCACTCGTGGTCCCGGTCGCCAGGGGACCCGCTTCGCGGCGCACACCAACGATCGGAGACAACACGATAGCTCCGTCCGCTTCAACTCTCCTCAATCCAGAAAACAAACACTGAAGAGAGACATTGCAATTATCCCGTAATCGGAATCCTAAGTGCTGCTAGAGCCTGCCGTGGTAGGTATGCGATGGAGGAAGCCCCATCGGTAGCGCTCCGCATCCGTCCATCGTCAGTTTTGACTTAATACGAGATCGGGCGGGATGCGGCGCTAAATATTTGACTCACCACCCAAGCGACAGGTGCGCCGTACAGACCAGTGTTTGACTTCGTGCGACCGCCTATATTCAATATTAACTCATAAATTTTTGAGCTTAAGCTCAAGCATCACGTAGTGCTATCCCTTTAAAGTCTTGAATCGGTTGGTGAAAGCGGGTCGACAGTGGACAACAGCTAACCGGATGTT"
    s2 = "TTGTACCCAATTTAAAGAGGGTAGTAGGGACGGGCGCGGACGACCTTGCTCCAATCAATACGAAAGGGAATTTGGCGTATACAGTGCAAATCTGTCATCATACAAGTGCAAAAACCGATACTGCTGGTGTGGCGTGTAAGTGATCGAGTGCACCTTAGCCTTGCTTTCAGCAGTGCCACTAAGTTAAAGGTGTACTGCAGCAACTCTACTGGTTATCTGGCCGTTGCAACCCAAGAGGACATGTTAAATTTAACCCAAAACTCGTGCGTCATCGAGTGAAGAAGGCGGGCATATGTACAACGCGGAGCCTGAGGACCAAAGGATATACTGTTTCACCGGTATCGTCGCATTGGCAGGTATCTGTCTTCGCATTACATTCACCGAGGTACAAGGCATCCATGATTGACGCACTAAGACGTATATACATGACCTAGACGACGTACAGCACGGTCTGGGTGGGTAGTGAGTTGTTCTAACCCCTGTTGTCCACTCTTCACAGTTATATATTAGAGAGGGGAGGCGCGACCGGTCGTGCACTCGCGGTCCCGGTGGTCCGGGGGCCCGCTCCACGTCACATGCCAGCACGCGGAGATGACCGGGGAGATTCCTTCAATTCAAACTCCTTCAATTCATAGGGCCGATACCGATGAGAGCTATTGCAATTATCCCGTGTCTAGTAGCCTGAAGGCTGCTAGACTCTAGCGTAATAAGCATGCACTGGGAGAAGCCCTATCTGCACCGCCCTACATCCGTACATTGTCGGTCTCGACTAACAACAAGATCAAGCGGTGTGCGGCCCCGAATAAGTAGTTCATCAACCCAATGCCAGGTGCCCCATAAAGACCATTGCTTGACTTCGTGCCGACGCCAGCGAGTAAGACCAGTTTGTAAATTGCCGAGCTTAAGCTAGAACACCATGTAGCGCCATCCCAGTAAAGTCTTGAATTGGTTGGTGATAGCGGGCCGACAATCGATACCGGCTAATCGGGTGTC"
    print(R_ration(s1,s2))